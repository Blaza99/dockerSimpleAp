stages:
- stage: BuildBackendServices

  pool:
    vmImage: ubuntu-latest

  jobs:
  - job: BuildDotnetBackend
    steps:
    - task: DotNetCoreCLI@2
      name: BuildDotNetApp
      inputs:
        command: 'build'
        projects: '**/MyFirstAzureWebApp/MyFirstAzureWebApp.csproj'
    - task: DotNetCoreCLI@2
      name: PublishDotNetApp
      inputs:
        command: 'publish'
        publishWebProjects: true
    - task: AzureWebApp@1
      name: DeploytoWebApp
      inputs:
        azureSubscription: 'sub-06(82fec995-d706-4757-a002-6bfc2d89631a)'
        appType: 'webApp'
        appName: 'mf01dev'
        package: '$(System.DefaultWorkingDirectory)/**/*.zip'
        deploymentMethod: 'zipDeploy'
  
  - job: BuildDocker_SalesBookLB
    displayName: BuildDockerService-SalesBook.LB
    steps:
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        Dockerfile: '**/SalesBook.LB/Dockerfile'
        containerRegistry: 'sub06-meritoacrmf'
        repository: 'SalesBook.LB'
        tags: |
          latest
          $(Build.SourceVersion)
      
  - job: BuildDocker_SalesBookWEB
    displayName: BuildDockerService-SalesBook.WEB
    steps:
    - task: Docker@2
      inputs:
        command: 'buildAndPush'
        Dockerfile: '**/SalesBook.WEB/Dockerfile'
        containerRegistry: 'sub06-meritoacrmf'
        repository: 'SalesBook.WEB'
        tags: |
          latest
          $(Build.SourceVersion)

- stage: PushImages

  pool:
    vmImage: ubuntu-latest
  
  jobs:
  - job: listAllImages
    condition: succeeded()
    steps:
    - script: docker images